<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="30" failed="0" total="30" passed="0">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="904" started-at="2015-06-09T16:03:26Z" finished-at="2015-06-09T16:03:27Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="904" started-at="2015-06-09T16:03:26Z" finished-at="2015-06-09T16:03:27Z">
      <class name="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
        <test-method status="FAIL" signature="initClass()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initClass" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:26Z" finished-at="2015-06-09T17:03:26Z">
          <exception class="com.datastax.driver.core.exceptions.InvalidQueryException">
            <message>
              <![CDATA[Keyspace 'hawkulartest' does not exist]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.datastax.driver.core.exceptions.InvalidQueryException: Keyspace 'hawkulartest' does not exist
	at com.datastax.driver.core.exceptions.InvalidQueryException.copy(InvalidQueryException.java:35)
	at com.datastax.driver.core.DefaultResultSetFuture.extractCauseFromExecutionException(DefaultResultSetFuture.java:289)
	at com.datastax.driver.core.Cluster.connect(Cluster.java:287)
	at org.hawkular.metrics.core.impl.cassandra.MetricsITest.initSession(MetricsITest.java:55)
	at org.hawkular.metrics.core.impl.cassandra.DataAccessITest.initClass(DataAccessITest.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:175)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:107)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
Caused by: com.datastax.driver.core.exceptions.InvalidQueryException: Keyspace 'hawkulartest' does not exist
	at com.datastax.driver.core.Responses$Error.asException(Responses.java:103)
	at com.datastax.driver.core.DefaultResultSetFuture.onSet(DefaultResultSetFuture.java:140)
	at com.datastax.driver.core.RequestHandler.setFinalResult(RequestHandler.java:293)
	at com.datastax.driver.core.RequestHandler.onSet(RequestHandler.java:455)
	at com.datastax.driver.core.Connection$Dispatcher.messageReceived(Connection.java:734)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.handler.timeout.IdleStateAwareChannelUpstreamHandler.handleUpstream(IdleStateAwareChannelUpstreamHandler.java:36)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.timeout.IdleStateHandler.messageReceived(IdleStateHandler.java:294)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
	at org.jboss.netty.handler.codec.oneone.OneToOneDecoder.handleUpstream(OneToOneDecoder.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:462)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:443)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)
	at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:108)
	at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:318)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:89)
	at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)
	at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)
	at org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- com.datastax.driver.core.exceptions.InvalidQueryException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initClass -->
        <test-method status="SKIP" signature="addMetadataToGaugeRawData()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="addMetadataToGaugeRawData" duration-ms="1" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addMetadataToGaugeRawData -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="deleteGuageMetrics()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="deleteGuageMetrics" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteGuageMetrics -->
        <test-method status="SKIP" signature="doNotAllowDuplicateTenants()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="doNotAllowDuplicateTenants" duration-ms="1" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- doNotAllowDuplicateTenants -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="findAllGaugeWithOneBucket()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="findAllGaugeWithOneBucket" duration-ms="1" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findAllGaugeWithOneBucket -->
        <test-method status="SKIP" signature="findAllGuageMeytricsWithTwoBuckets()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="findAllGuageMeytricsWithTwoBuckets" duration-ms="1" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findAllGuageMeytricsWithTwoBuckets -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="findCountersByGroup()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="findCountersByGroup" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findCountersByGroup -->
        <test-method status="SKIP" signature="findCountersByGroupAndName()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="findCountersByGroupAndName" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findCountersByGroupAndName -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="getMetricTags()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="getMetricTags" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getMetricTags -->
        <test-method status="SKIP" signature="insertAndFindAvailabilitiesInOneBucket()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindAvailabilitiesInOneBucket" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindAvailabilitiesInOneBucket -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="insertAndFindAvailabilitiesInThreeBuckets()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindAvailabilitiesInThreeBuckets" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindAvailabilitiesInThreeBuckets -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="insertAndFindAvailabilitiesInTwoBuckets()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindAvailabilitiesInTwoBuckets" duration-ms="1" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindAvailabilitiesInTwoBuckets -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="insertAndFindAvailabilitiesWithoutWriteTimeInOneBucket()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindAvailabilitiesWithoutWriteTimeInOneBucket" duration-ms="1" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindAvailabilitiesWithoutWriteTimeInOneBucket -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="insertAndFindAvailabilitiesWithoutWriteTimeInThreeBuckets()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindAvailabilitiesWithoutWriteTimeInThreeBuckets" duration-ms="1" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindAvailabilitiesWithoutWriteTimeInThreeBuckets -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="insertAndFindAvailabilitiesWithoutWriteTimeInTwoBuckets()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindAvailabilitiesWithoutWriteTimeInTwoBuckets" duration-ms="2" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindAvailabilitiesWithoutWriteTimeInTwoBuckets -->
        <test-method status="SKIP" signature="insertAndFindAvailbilitiesWithWriteTimeInOneBucket()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindAvailbilitiesWithWriteTimeInOneBucket" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindAvailbilitiesWithWriteTimeInOneBucket -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="insertAndFindAvailbilitiesWithWriteTimeInThreeBuckets()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindAvailbilitiesWithWriteTimeInThreeBuckets" duration-ms="1" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindAvailbilitiesWithWriteTimeInThreeBuckets -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="insertAndFindAvailbilitiesWithWriteTimeInTwoBuckets()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindAvailbilitiesWithWriteTimeInTwoBuckets" duration-ms="1" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindAvailbilitiesWithWriteTimeInTwoBuckets -->
        <test-method status="SKIP" signature="insertAndFindGaugeRawDataByGaugeWitOneBucketOrderByASC()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindGaugeRawDataByGaugeWitOneBucketOrderByASC" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindGaugeRawDataByGaugeWitOneBucketOrderByASC -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="insertAndFindGaugeRawDataByGaugeWithOneBucket()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindGaugeRawDataByGaugeWithOneBucket" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindGaugeRawDataByGaugeWithOneBucket -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="insertAndFindGaugeRawDataByGaugeWithThreeBuckets()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindGaugeRawDataByGaugeWithThreeBuckets" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindGaugeRawDataByGaugeWithThreeBuckets -->
        <test-method status="SKIP" signature="insertAndFindGaugeRawDataByGaugeWithThreeBucketsOrderByASC()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindGaugeRawDataByGaugeWithThreeBucketsOrderByASC" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindGaugeRawDataByGaugeWithThreeBucketsOrderByASC -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="insertAndFindGaugeRawDataByGaugeWithTwoBuckets()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindGaugeRawDataByGaugeWithTwoBuckets" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindGaugeRawDataByGaugeWithTwoBuckets -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="insertAndFindGaugeRawDataByGaugeWithTwoBucketsOrderByASC()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindGaugeRawDataByGaugeWithTwoBucketsOrderByASC" duration-ms="1" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindGaugeRawDataByGaugeWithTwoBucketsOrderByASC -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="insertAndFindGaugeRawDataWithOneBucket()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindGaugeRawDataWithOneBucket" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindGaugeRawDataWithOneBucket -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="insertAndFindGaugeRawDataWithThreeBuckets()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindGaugeRawDataWithThreeBuckets" duration-ms="1" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindGaugeRawDataWithThreeBuckets -->
        <test-method status="SKIP" signature="insertAndFindGaugeRawDataWithTwoBuckets()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindGaugeRawDataWithTwoBuckets" duration-ms="2" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindGaugeRawDataWithTwoBuckets -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="insertAndFindSingleGaugeData()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindSingleGaugeData" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindSingleGaugeData -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="insertAndFindTenant()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="insertAndFindTenant" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insertAndFindTenant -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="updateCounterAndFindCounter()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="updateCounterAndFindCounter" duration-ms="1" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateCounterAndFindCounter -->
        <test-method status="SKIP" signature="initMethod()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="initMethod" is-config="true" duration-ms="0" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMethod -->
        <test-method status="SKIP" signature="updateCounters()[pri:0, instance:org.hawkular.metrics.core.impl.cassandra.DataAccessITest@380fb434]" name="updateCounters" duration-ms="1" started-at="2015-06-09T17:03:27Z" finished-at="2015-06-09T17:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateCounters -->
      </class> <!-- org.hawkular.metrics.core.impl.cassandra.DataAccessITest -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
