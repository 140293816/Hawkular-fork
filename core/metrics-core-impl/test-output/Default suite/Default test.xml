<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="localhost.localdomain" name="Default test" tests="30" failures="0" timestamp="9 Jun 2015 16:03:27 GMT" time="0.904" errors="0">
  <testcase name="@BeforeClass initClass" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <failure type="com.datastax.driver.core.exceptions.InvalidQueryException" message="Keyspace &amp;apos;hawkulartest&amp;apos; does not exist">
      <![CDATA[com.datastax.driver.core.exceptions.InvalidQueryException: Keyspace 'hawkulartest' does not exist
	at com.datastax.driver.core.exceptions.InvalidQueryException.copy(InvalidQueryException.java:35)
	at com.datastax.driver.core.DefaultResultSetFuture.extractCauseFromExecutionException(DefaultResultSetFuture.java:289)
	at com.datastax.driver.core.Cluster.connect(Cluster.java:287)
	at org.hawkular.metrics.core.impl.cassandra.MetricsITest.initSession(MetricsITest.java:55)
	at org.hawkular.metrics.core.impl.cassandra.DataAccessITest.initClass(DataAccessITest.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:175)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:107)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
Caused by: com.datastax.driver.core.exceptions.InvalidQueryException: Keyspace 'hawkulartest' does not exist
	at com.datastax.driver.core.Responses$Error.asException(Responses.java:103)
	at com.datastax.driver.core.DefaultResultSetFuture.onSet(DefaultResultSetFuture.java:140)
	at com.datastax.driver.core.RequestHandler.setFinalResult(RequestHandler.java:293)
	at com.datastax.driver.core.RequestHandler.onSet(RequestHandler.java:455)
	at com.datastax.driver.core.Connection$Dispatcher.messageReceived(Connection.java:734)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.handler.timeout.IdleStateAwareChannelUpstreamHandler.handleUpstream(IdleStateAwareChannelUpstreamHandler.java:36)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.timeout.IdleStateHandler.messageReceived(IdleStateHandler.java:294)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
	at org.jboss.netty.handler.codec.oneone.OneToOneDecoder.handleUpstream(OneToOneDecoder.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:462)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:443)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)
	at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:108)
	at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:318)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:89)
	at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)
	at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)
	at org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
]]>
    </failure>
  </testcase> <!-- @BeforeClass initClass -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="@BeforeMethod initMethod" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- @BeforeMethod initMethod -->
  <testcase name="addMetadataToGaugeRawData" time="0.001" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- addMetadataToGaugeRawData -->
  <testcase name="deleteGuageMetrics" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- deleteGuageMetrics -->
  <testcase name="doNotAllowDuplicateTenants" time="0.001" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- doNotAllowDuplicateTenants -->
  <testcase name="findAllGaugeWithOneBucket" time="0.001" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- findAllGaugeWithOneBucket -->
  <testcase name="findAllGuageMeytricsWithTwoBuckets" time="0.001" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- findAllGuageMeytricsWithTwoBuckets -->
  <testcase name="findCountersByGroup" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- findCountersByGroup -->
  <testcase name="findCountersByGroupAndName" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- findCountersByGroupAndName -->
  <testcase name="getMetricTags" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- getMetricTags -->
  <testcase name="insertAndFindAvailabilitiesInOneBucket" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindAvailabilitiesInOneBucket -->
  <testcase name="insertAndFindAvailabilitiesInThreeBuckets" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindAvailabilitiesInThreeBuckets -->
  <testcase name="insertAndFindAvailabilitiesInTwoBuckets" time="0.001" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindAvailabilitiesInTwoBuckets -->
  <testcase name="insertAndFindAvailabilitiesWithoutWriteTimeInOneBucket" time="0.001" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindAvailabilitiesWithoutWriteTimeInOneBucket -->
  <testcase name="insertAndFindAvailabilitiesWithoutWriteTimeInThreeBuckets" time="0.001" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindAvailabilitiesWithoutWriteTimeInThreeBuckets -->
  <testcase name="insertAndFindAvailabilitiesWithoutWriteTimeInTwoBuckets" time="0.002" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindAvailabilitiesWithoutWriteTimeInTwoBuckets -->
  <testcase name="insertAndFindAvailbilitiesWithWriteTimeInOneBucket" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindAvailbilitiesWithWriteTimeInOneBucket -->
  <testcase name="insertAndFindAvailbilitiesWithWriteTimeInThreeBuckets" time="0.001" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindAvailbilitiesWithWriteTimeInThreeBuckets -->
  <testcase name="insertAndFindAvailbilitiesWithWriteTimeInTwoBuckets" time="0.001" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindAvailbilitiesWithWriteTimeInTwoBuckets -->
  <testcase name="insertAndFindGaugeRawDataByGaugeWitOneBucketOrderByASC" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindGaugeRawDataByGaugeWitOneBucketOrderByASC -->
  <testcase name="insertAndFindGaugeRawDataByGaugeWithOneBucket" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindGaugeRawDataByGaugeWithOneBucket -->
  <testcase name="insertAndFindGaugeRawDataByGaugeWithThreeBuckets" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindGaugeRawDataByGaugeWithThreeBuckets -->
  <testcase name="insertAndFindGaugeRawDataByGaugeWithThreeBucketsOrderByASC" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindGaugeRawDataByGaugeWithThreeBucketsOrderByASC -->
  <testcase name="insertAndFindGaugeRawDataByGaugeWithTwoBuckets" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindGaugeRawDataByGaugeWithTwoBuckets -->
  <testcase name="insertAndFindGaugeRawDataByGaugeWithTwoBucketsOrderByASC" time="0.001" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindGaugeRawDataByGaugeWithTwoBucketsOrderByASC -->
  <testcase name="insertAndFindGaugeRawDataWithOneBucket" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindGaugeRawDataWithOneBucket -->
  <testcase name="insertAndFindGaugeRawDataWithThreeBuckets" time="0.001" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindGaugeRawDataWithThreeBuckets -->
  <testcase name="insertAndFindGaugeRawDataWithTwoBuckets" time="0.002" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindGaugeRawDataWithTwoBuckets -->
  <testcase name="insertAndFindSingleGaugeData" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindSingleGaugeData -->
  <testcase name="insertAndFindTenant" time="0.0" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- insertAndFindTenant -->
  <testcase name="updateCounterAndFindCounter" time="0.001" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- updateCounterAndFindCounter -->
  <testcase name="updateCounters" time="0.001" classname="org.hawkular.metrics.core.impl.cassandra.DataAccessITest">
    <skipped/>
  </testcase> <!-- updateCounters -->
</testsuite> <!-- Default test -->
